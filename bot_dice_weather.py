#  –ú–û–ô –ü–ï–†–í–´–ô –ë–û–¢ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram

#  –®–ê–ì 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#  –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞
from config import TOKEN, open_weather_token

#  –¥–ª—è –ø–æ–≥–æ–¥—ã, –±–∏–∞—Ç–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
import requests
from bs4 import BeautifulSoup

#  –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, Dispatcher, executor, types
import datetime
from db_weather import db_weather  # —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–∞–∑—É –¥–ª—è –ø–æ–≥–æ–¥—ã


#  –®–ê–ì 2.
#  –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)

#  –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)


#  –®–ê–ì 3
""" ================================= START ========================================"""
#  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def process_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           """\t–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç FIRSTBOT!
                            """)

# —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü–æ–µ—Ö–∞–ª–∏", "–ü–æ–º–æ—â—å"]
    keyboard.add(*buttons)
    await message.answer("–ù—É —á—Ç–æ –Ω–∞—á–∞–ª–∏ –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é?", reply_markup=keyboard)

#  –ü—Ä–æ—Å–∏–º —É –±–æ—Ç–∞ –ø–æ–º–æ—â–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å
@dp.message_handler((lambda message: message.text == "–ü–æ–º–æ—â—å"))
async def help(message: types.Message):
    await bot.send_message(message.from_user.id, '–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É\n'
                                                 '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –±–∏–∞—Ç–ª–æ–Ω–∞\n'
                                                 '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ñ—É—Ç–±–æ–ª–∞\n'
                                                 '–ë—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏')

# —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ü–û–ï–•–ê–õ–ò
@dp.message_handler((lambda message: message.text == "–ü–æ–µ—Ö–∞–ª–∏"))
async def big_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ë–∏–∞—Ç–ª–æ–Ω", "–ü–æ–≥–æ–¥–∞", "–§—É—Ç–±–æ–ª", "–ö–æ—Å—Ç–∏", "–ü–æ–º–æ—â—å"]
    keyboard.add(*buttons)
    await message.answer("–Ø –≥–æ—Ç–æ–≤", reply_markup=keyboard)


"""" =============================  –ö–û–°–¢–ò  ================================== """

#  –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
@dp.message_handler((lambda message: message.text == "–ö–æ—Å—Ç–∏"))
async def cmd_dice(message: types.Message):
    await message.bot.send_dice(message.from_user.id, emoji="üé≤")


''' ================================ –ù–û–í–û–°–¢–ò –ë–ò–ê–¢–õ–û–ù–ê ==================================== '''
# @dp.message_handler(commands= "biathlon")
@dp.message_handler((lambda message: message.text == "–ë–∏–∞—Ç–ª–æ–Ω"))
async def process_biathlon(message: types.Message):

    URL = 'https://www.biathlon.com.ua/ua/'
    HEADERS = {'Accept': '*/*', 'User-Agent':
	            'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0'
                }
## —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è html
    def get_html(url, params = ''):
        r = requests.get(url, headers=HEADERS, params=params)
        return r

## —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    def get_content(html):
        soup = BeautifulSoup(html, 'html.parser')
        items = soup.find_all('div', class_= "news-item")
        news = []
        url_news = []
        for item in items:
            news.append(
                (item.find('td', class_="news_title").find('a').get_text(strip=True))
                        )

            url_news.append(
                URL + (item.find('td', class_="news_title").find('a').get('href'))
            )

        news_out = f'{news[0]}\n{url_news[0]}\n{news[1]}\n{url_news[1]}\n' \
                   f'{news[2]}\n{url_news[2]}\n{news[3]}\n{url_news[3]}\n{news[4]}\n{url_news[4]}'
        return news_out



    html = get_html(URL)
    news = get_content(html.text)



    await bot.send_message(message.from_user.id, news)

''' =============================  –§–£–¢–ë–û–õ  ======================================='''
# –ù–û–í–û–°–¢–ò –§–£–¢–ë–û–õ–ê
@dp.message_handler(lambda message: message.text == "–§—É—Ç–±–æ–ª")
async def process_football(message: types.Message):

    URL = 'https://football24.ua/ru/'
    HEADERS = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
               'User-Agent':
                   'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0'
               }

    # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è html
    def get_html(url, params=''):
        r = requests.get(url, headers=HEADERS, params=params)
        return r

    # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    def get_content(html):
        soup = BeautifulSoup(html, 'html.parser')
        items_url = soup.find_all('li', class_="news-list-item important")
        items_news = soup.find_all('div', class_='title')
        news = []
        url_news = []

        for item in items_url[:8]:
            url_news.append(
                item.find('a').get('href')
            )

        for item in items_news[:8]:
            news.append(item.text.strip()
                        )

        news_out_football= f'{news[0]}\n{url_news[0]}\n{news[1]}\n{url_news[1]}\n' \
                           f'{news[2]}\n{url_news[2]}\n{news[3]}\n{url_news[3]}\n' \
                           f'{news[4]}\n{url_news[4]}\n{news[5]}\n{url_news[5]}\n' \
                           f'{news[6]}\n{url_news[6]}\n{news[7]}\n{url_news[7]}'
        print(news_out_football)
        return news_out_football



    html = get_html(URL)
    football_news = get_content(html.text)
    await bot.send_message(message.from_user.id, football_news)

'''=============================== –ü–û–ì–û–î–ê ========================================'''
# –ó–ê–ü–†–û–° –ü–û–ì–û–î–´
@dp.message_handler(lambda message: message.text == "–ü–æ–≥–æ–¥–∞")
async def process_get_city(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–æ–¥–∏–º –ª–æ–∫–∞—Ü–∏—é: ')
@dp.message_handler(content_types="text")
async def process_get_weather(msg: types.Message):
    city = msg.text
    r = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={city}'
                         f'&appid={open_weather_token}&units=metric')
    data_weather = r.json()
    errs = {"cod":"404","message":"city not found"}
    if data_weather == errs:
        await bot.send_message(msg.from_user.id,'–ü—Ä–æ–≤–µ—Ä—å –ª–æ–∫–∞—Ü–∏—é')
    else:
        city = data_weather['name']
        temp = data_weather['main']['temp']
        pressure = data_weather['main']['pressure']
        humidity = data_weather['main']['humidity']
        description_weather = data_weather['weather'][0]['main']
        today = datetime.datetime.now()
        today_string = today.strftime(" %d-%b-%Y ")

    await bot.send_message(msg.from_user.id, f'–ü–æ–≥–æ–¥–∞ –Ω–∞ {today_string} –¥–ª—è {city}:\n'
                                             f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞  {int(temp)} C\n'
                                             f'–î–∞–≤–ª–µ–Ω–∏–µ  {pressure} –º–º —Ä—Ç.—Å—Ç\n'
                                             f'–í–ª–∞–∂–Ω–æ—Å—Ç—å  {humidity} %\n'
                                             f'–û–ø–∏—Å–∞–Ω–∏–µ  {db_weather[description_weather]}')
    await bot.send_message(msg.from_user.id, f' –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)



